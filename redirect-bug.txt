<expletive>

http://domains.google.com/checkip doesn't "just work" as of February
2016 for IPv4 addresses from Python, which is unfortunate, given
in a previous life I personally wrote the Google server side code
with an eye towards writing a python client.

The server code is fine, per se.  But a combination of factors are
at work:

* Google now redirects all unencrypted (http) requests to secure
  (https) URLs.
* Google is IPv6 enabled, and it's not easily disabled for other
  than www.google.com.  (ipv4.google.com is an IPv4-only alias of
  www.google.com itself).
* Dynamic DNS checking is strictly for IPv4 (IPv6 doesn't need it).
* Python's high level libraries like urllib don't allow forcing
  IPv4 except by:
  a) replacing the host name in URL with the IP address -and-
  b) manually adding a "Host: domains.google.com" header -or-
  c) Replacing the connection routine to only look up IPv4 addresses.
* Python checks the host in the URL (not the Host header) against
  the SSL cert returned by the server.

So the Python IPv4 workaround doesn't work when https is forced by
Google because the IP address doesn't match the SSL certificate.

A temporary work around is to use http://checkip.kew.com, which is
a prototype of the same functionality. It was implemented in Python
on Google App Engine, which doesn't force the redirect to SSL.  This
is safe (as in unlikely to break), but insecure.

Another work around is rather than calling urllib2, use python's
lower level urlparse and http.request modules; when used in tandem, these
support HTTP or HTTPS, although they don't automatically handle redirect
or authentication.

Asd of November 2019, the work around in dns_update.py is to force only IPv4
address lookup by replacing an internal connection hook meant for unit testing in HTTPConnect.
